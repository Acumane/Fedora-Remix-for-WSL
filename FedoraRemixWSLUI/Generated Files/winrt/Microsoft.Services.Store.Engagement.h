// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Microsoft_Services_Store_Engagement_H
#define WINRT_Microsoft_Services_Store_Engagement_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.210505.3"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.210505.3"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Services.Store.Engagement.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Services_Store_Engagement_IStoreServicesCustomEventLogger<D>::Log(param::hstring const& eventName) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesCustomEventLogger)->Log(*(void**)(&eventName)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Services_Store_Engagement_IStoreServicesCustomEventLogger<D>::LogForVariation(winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariation const& experimentVariation, param::hstring const& eventName) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesCustomEventLogger)->LogForVariation(*(void**)(&experimentVariation), *(void**)(&eventName)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Services::Store::Engagement::StoreServicesCustomEventLogger) consume_Microsoft_Services_Store_Engagement_IStoreServicesCustomEventLoggerStatics<D>::GetDefault() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesCustomEventLoggerStatics)->GetDefault(&result));
        return winrt::Microsoft::Services::Store::Engagement::StoreServicesCustomEventLogger{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesNotificationChannelRegistrationResult>) consume_Microsoft_Services_Store_Engagement_IStoreServicesEngagementManager<D>::RegisterNotificationChannelAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManager)->RegisterNotificationChannelAsync(&operation));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesNotificationChannelRegistrationResult>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesNotificationChannelRegistrationResult>) consume_Microsoft_Services_Store_Engagement_IStoreServicesEngagementManager<D>::RegisterNotificationChannelAsync(winrt::Microsoft::Services::Store::Engagement::StoreServicesNotificationChannelParameters const& parameters) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManager)->RegisterNotificationChannelWithParametersAsync(*(void**)(&parameters), &operation));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesNotificationChannelRegistrationResult>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesEngagementManager<D>::ParseArgumentsAndTrackAppLaunch(param::hstring const& launchArguments) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManager)->ParseArgumentsAndTrackAppLaunch(*(void**)(&launchArguments), &result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<bool>) consume_Microsoft_Services_Store_Engagement_IStoreServicesEngagementManager2<D>::UnregisterNotificationChannelAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManager2)->UnregisterNotificationChannelAsync(&operation));
        return winrt::Windows::Foundation::IAsyncOperation<bool>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementManager) consume_Microsoft_Services_Store_Engagement_IStoreServicesEngagementManagerStatics<D>::GetDefault() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManagerStatics)->GetDefault(&result));
        return winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementManager{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariation<D>::ExperimentId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation)->get_ExperimentId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariation<D>::ExperimentName() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation)->get_ExperimentName(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariation<D>::VariationId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation)->get_VariationId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariation<D>::ExperimentProjectId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation)->get_ExperimentProjectId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariation<D>::IsStale() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation)->get_IsStale(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariation<D>::GetString(param::hstring const& name, param::hstring const& defaultValue) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation)->GetString(*(void**)(&name), *(void**)(&defaultValue), &result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariation<D>::GetBoolean(param::hstring const& name, bool defaultValue) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation)->GetBoolean(*(void**)(&name), defaultValue, &result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(double) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariation<D>::GetDouble(param::hstring const& name, double defaultValue) const
    {
        double result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation)->GetDouble(*(void**)(&name), defaultValue, &result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(int32_t) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariation<D>::GetInt32(param::hstring const& name, int32_t defaultValue) const
    {
        int32_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation)->GetInt32(*(void**)(&name), defaultValue, &result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementErrorCode) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariationResult<D>::ErrorCode() const
    {
        winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementErrorCode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationResult)->get_ErrorCode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariationResult<D>::ErrorMessage() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationResult)->get_ErrorMessage(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariation) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariationResult<D>::ExperimentVariation() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationResult)->get_ExperimentVariation(&value));
        return winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariation{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariationResult>) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariationStatics<D>::GetCachedVariationAsync(param::hstring const& experimentProjectId) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationStatics)->GetCachedVariationAsync(*(void**)(&experimentProjectId), &operation));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariationResult>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariationResult>) consume_Microsoft_Services_Store_Engagement_IStoreServicesExperimentVariationStatics<D>::GetRefreshedVariationAsync(param::hstring const& experimentProjectId) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationStatics)->GetRefreshedVariationAsync(*(void**)(&experimentProjectId), &operation));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariationResult>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<bool>) consume_Microsoft_Services_Store_Engagement_IStoreServicesFeedbackLauncher<D>::LaunchAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesFeedbackLauncher)->LaunchAsync(&operation));
        return winrt::Windows::Foundation::IAsyncOperation<bool>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<bool>) consume_Microsoft_Services_Store_Engagement_IStoreServicesFeedbackLauncher<D>::LaunchAsync(param::map<hstring, hstring> const& inputData) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesFeedbackLauncher)->LaunchWithInputDataAsync(*(void**)(&inputData), &operation));
        return winrt::Windows::Foundation::IAsyncOperation<bool>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Services::Store::Engagement::StoreServicesFeedbackLauncher) consume_Microsoft_Services_Store_Engagement_IStoreServicesFeedbackLauncherStatics<D>::GetDefault() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesFeedbackLauncherStatics)->GetDefault(&result));
        return winrt::Microsoft::Services::Store::Engagement::StoreServicesFeedbackLauncher{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_Services_Store_Engagement_IStoreServicesFeedbackLauncherStatics<D>::IsSupported() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesFeedbackLauncherStatics)->IsSupported(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesNotificationChannelParameters<D>::CustomUserId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelParameters)->get_CustomUserId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Services_Store_Engagement_IStoreServicesNotificationChannelParameters<D>::CustomUserId(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelParameters)->put_CustomUserId(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesNotificationChannelParameters<D>::CustomSystemId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelParameters)->get_CustomSystemId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Services_Store_Engagement_IStoreServicesNotificationChannelParameters<D>::CustomSystemId(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelParameters)->put_CustomSystemId(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesNotificationChannelParameters<D>::CustomNotificationChannelUri() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelParameters)->get_CustomNotificationChannelUri(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Services_Store_Engagement_IStoreServicesNotificationChannelParameters<D>::CustomNotificationChannelUri(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelParameters)->put_CustomNotificationChannelUri(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementErrorCode) consume_Microsoft_Services_Store_Engagement_IStoreServicesNotificationChannelRegistrationResult<D>::ErrorCode() const
    {
        winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementErrorCode value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelRegistrationResult)->get_ErrorCode(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesNotificationChannelRegistrationResult<D>::ErrorMessage() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelRegistrationResult)->get_ErrorMessage(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Services_Store_Engagement_IStoreServicesNotificationChannelRegistrationResult<D>::NotificationChannelUri() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelRegistrationResult)->get_NotificationChannelUri(&value));
        return hstring{ value, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesCustomEventLogger> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesCustomEventLogger>
    {
        int32_t __stdcall Log(void* eventName) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Log(*reinterpret_cast<hstring const*>(&eventName));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LogForVariation(void* experimentVariation, void* eventName) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LogForVariation(*reinterpret_cast<winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariation const*>(&experimentVariation), *reinterpret_cast<hstring const*>(&eventName));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesCustomEventLoggerStatics> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesCustomEventLoggerStatics>
    {
        int32_t __stdcall GetDefault(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Services::Store::Engagement::StoreServicesCustomEventLogger>(this->shim().GetDefault());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManager> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManager>
    {
        int32_t __stdcall RegisterNotificationChannelAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesNotificationChannelRegistrationResult>>(this->shim().RegisterNotificationChannelAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RegisterNotificationChannelWithParametersAsync(void* parameters, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesNotificationChannelRegistrationResult>>(this->shim().RegisterNotificationChannelAsync(*reinterpret_cast<winrt::Microsoft::Services::Store::Engagement::StoreServicesNotificationChannelParameters const*>(&parameters)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ParseArgumentsAndTrackAppLaunch(void* launchArguments, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().ParseArgumentsAndTrackAppLaunch(*reinterpret_cast<hstring const*>(&launchArguments)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManager2> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManager2>
    {
        int32_t __stdcall UnregisterNotificationChannelAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<bool>>(this->shim().UnregisterNotificationChannelAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManagerStatics> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManagerStatics>
    {
        int32_t __stdcall GetDefault(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementManager>(this->shim().GetDefault());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation>
    {
        int32_t __stdcall get_ExperimentId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ExperimentId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExperimentName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ExperimentName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_VariationId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().VariationId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExperimentProjectId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ExperimentProjectId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsStale(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsStale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetString(void* name, void* defaultValue, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetString(*reinterpret_cast<hstring const*>(&name), *reinterpret_cast<hstring const*>(&defaultValue)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetBoolean(void* name, bool defaultValue, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().GetBoolean(*reinterpret_cast<hstring const*>(&name), defaultValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDouble(void* name, double defaultValue, double* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<double>(this->shim().GetDouble(*reinterpret_cast<hstring const*>(&name), defaultValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetInt32(void* name, int32_t defaultValue, int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<int32_t>(this->shim().GetInt32(*reinterpret_cast<hstring const*>(&name), defaultValue));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationResult> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationResult>
    {
        int32_t __stdcall get_ErrorCode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementErrorCode>(this->shim().ErrorCode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ErrorMessage(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ErrorMessage());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExperimentVariation(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariation>(this->shim().ExperimentVariation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationStatics> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationStatics>
    {
        int32_t __stdcall GetCachedVariationAsync(void* experimentProjectId, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariationResult>>(this->shim().GetCachedVariationAsync(*reinterpret_cast<hstring const*>(&experimentProjectId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRefreshedVariationAsync(void* experimentProjectId, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariationResult>>(this->shim().GetRefreshedVariationAsync(*reinterpret_cast<hstring const*>(&experimentProjectId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesFeedbackLauncher> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesFeedbackLauncher>
    {
        int32_t __stdcall LaunchAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<bool>>(this->shim().LaunchAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LaunchWithInputDataAsync(void* inputData, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<bool>>(this->shim().LaunchAsync(*reinterpret_cast<winrt::Windows::Foundation::Collections::IMap<hstring, hstring> const*>(&inputData)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesFeedbackLauncherStatics> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesFeedbackLauncherStatics>
    {
        int32_t __stdcall GetDefault(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Services::Store::Engagement::StoreServicesFeedbackLauncher>(this->shim().GetDefault());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSupported(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelParameters> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelParameters>
    {
        int32_t __stdcall get_CustomUserId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CustomUserId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CustomUserId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CustomUserId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CustomSystemId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CustomSystemId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CustomSystemId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CustomSystemId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CustomNotificationChannelUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CustomNotificationChannelUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CustomNotificationChannelUri(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CustomNotificationChannelUri(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelRegistrationResult> : produce_base<D, winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelRegistrationResult>
    {
        int32_t __stdcall get_ErrorCode(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementErrorCode>(this->shim().ErrorCode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ErrorMessage(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ErrorMessage());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_NotificationChannelUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().NotificationChannelUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Services::Store::Engagement
{
    inline auto StoreServicesCustomEventLogger::GetDefault()
    {
        return impl::call_factory_cast<winrt::Microsoft::Services::Store::Engagement::StoreServicesCustomEventLogger(*)(IStoreServicesCustomEventLoggerStatics const&), StoreServicesCustomEventLogger, IStoreServicesCustomEventLoggerStatics>([](IStoreServicesCustomEventLoggerStatics const& f) { return f.GetDefault(); });
    }
    inline auto StoreServicesEngagementManager::GetDefault()
    {
        return impl::call_factory_cast<winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementManager(*)(IStoreServicesEngagementManagerStatics const&), StoreServicesEngagementManager, IStoreServicesEngagementManagerStatics>([](IStoreServicesEngagementManagerStatics const& f) { return f.GetDefault(); });
    }
    inline auto StoreServicesExperimentVariation::GetCachedVariationAsync(param::hstring const& experimentProjectId)
    {
        return impl::call_factory<StoreServicesExperimentVariation, IStoreServicesExperimentVariationStatics>([&](IStoreServicesExperimentVariationStatics const& f) { return f.GetCachedVariationAsync(experimentProjectId); });
    }
    inline auto StoreServicesExperimentVariation::GetRefreshedVariationAsync(param::hstring const& experimentProjectId)
    {
        return impl::call_factory<StoreServicesExperimentVariation, IStoreServicesExperimentVariationStatics>([&](IStoreServicesExperimentVariationStatics const& f) { return f.GetRefreshedVariationAsync(experimentProjectId); });
    }
    inline auto StoreServicesFeedbackLauncher::GetDefault()
    {
        return impl::call_factory_cast<winrt::Microsoft::Services::Store::Engagement::StoreServicesFeedbackLauncher(*)(IStoreServicesFeedbackLauncherStatics const&), StoreServicesFeedbackLauncher, IStoreServicesFeedbackLauncherStatics>([](IStoreServicesFeedbackLauncherStatics const& f) { return f.GetDefault(); });
    }
    inline auto StoreServicesFeedbackLauncher::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(IStoreServicesFeedbackLauncherStatics const&), StoreServicesFeedbackLauncher, IStoreServicesFeedbackLauncherStatics>([](IStoreServicesFeedbackLauncherStatics const& f) { return f.IsSupported(); });
    }
    inline StoreServicesNotificationChannelParameters::StoreServicesNotificationChannelParameters() :
        StoreServicesNotificationChannelParameters(impl::call_factory_cast<StoreServicesNotificationChannelParameters(*)(winrt::Windows::Foundation::IActivationFactory const&), StoreServicesNotificationChannelParameters>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<StoreServicesNotificationChannelParameters>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesCustomEventLogger> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesCustomEventLoggerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManager2> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesEngagementManagerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesExperimentVariationStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesFeedbackLauncher> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesFeedbackLauncherStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelParameters> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::IStoreServicesNotificationChannelRegistrationResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::StoreServicesCustomEventLogger> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::StoreServicesEngagementManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::StoreServicesExperimentVariationResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::StoreServicesFeedbackLauncher> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::StoreServicesNotificationChannelParameters> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Services::Store::Engagement::StoreServicesNotificationChannelRegistrationResult> : winrt::impl::hash_base {};
#endif
}
#endif
